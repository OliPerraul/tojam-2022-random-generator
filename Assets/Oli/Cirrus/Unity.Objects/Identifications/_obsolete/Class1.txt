#if UNITY_EDITOR
	// IngredientDrawerUIE
	[CustomPropertyDrawer(typeof(ResolveIDAssetAttribute))]
	public class IDAssetPropertyDrawer : PropertyDrawer
	{
		public override void OnGUI(Rect position, SerializedProperty property, GUIContent label)
		{
			base.OnGUI(position, property, label);

			IDAsset asset = null;
			
			if (property.objectReferenceValue == null)
			{
				MonoBehaviour targetObject = (MonoBehaviour)property.serializedObject.targetObject;

				//if (
				//	 PrefabUtility.GetCorrespondingObjectFromSource(targetObject.gameObject) == null &&
				//	 PrefabUtility.GetPrefabInstanceHandle(gameObject) != null &&
				//	_asset == null
				//	)
				{
					string path = AssetDatabase.GetAssetPath(targetObject.gameObject);
					//string path = PrefabStageUtility.GetPrefabStage(gameObject).assetPath;
					property.objectReferenceValue = IDAsset.Assign(path);
					EditorUtility.SetDirty(targetObject);
					AssetDatabase.SaveAssetIfDirty(targetObject);
					//var prefab = AssetDatabase.LoadAssetAtPath<GameObject>(path);
					//GameObject prefab = PrefabStageUtility.GetPrefabStage(gameObject);
					PrefabUtility.SavePrefabAsset(targetObject.gameObject);
				}

				//return;
			}

			asset = (IDAsset)property.objectReferenceValue;
			EditorGUI.BeginDisabledGroup(true);
			EditorGUILayout.IntField(asset.ID);
			EditorGUI.EndDisabledGroup();
		}
	}
#endif


	//{
	//	public static class IDAssetUtils
	//	{
	//		public static IDAsset CreateAsset()
	//		{
	//			IDAsset asset = ScriptableObjectUtils.CreateAsset<IDAsset>();
	//			T asset = ScriptableObject.CreateInstance<IDAsset>();
	//			AddObjectToAsset(Object objectToAdd, string path);
	//			IDLibrary.Instance.Add(asset);
	//			return asset;
	//		}
	//	}
	public class ResolveIDAssetAttribute : PropertyAttribute
	{
	}

	public class IDAsset : ScriptableObjectAssetBase, IIdentified
	{
		[field: SerializeField]		
		public int ID { get; set; }

#if UNITY_EDITOR

		[field: HideInInspector]
		[field:SerializeField]
		public Object Owner { get; set; }

		public static IDAsset Assign(string path)
		{
			//ScriptableObjectUtils.CreateAsset

			// TODO: Check if Prefab view is open					

			//Object parentObject = PrefabUtility.GetCorrespondingObjectFromSource(owner);
			//Object parentObject = EditorUtility.GetPrefabParent(owner); 
			//string path = AssetDatabase.GetAssetPath(parentObject);

			//string path = AssetDatabase.GetAssetPath(owner);
			IDAsset asset = ScriptableObject.CreateInstance<IDAsset>();
			asset.name = "ID";
			AssetDatabase.AddObjectToAsset(asset, path);
			IDLibrary.Instance.Add(asset);
			//AssetDatabase.ImportAsset(AssetDatabase.GetAssetPath(asset));
			return asset;
		}

		public static IDAsset Assign(Object owner)
		{
			//string path = UnityEditor.SceneManagement.PrefabStageUtility.GetPrefabStage(owner).assetPath;

			//Object parentObject = PrefabUtility.GetCorrespondingObjectFromSource(owner);
			////Object parentObject = EditorUtility.GetPrefabParent(owner); 
			//string path = AssetDatabase.GetAssetPath(parentObject);

			////string path = AssetDatabase.GetAssetPath(owner);
			//IDAsset asset = ScriptableObject.CreateInstance<IDAsset>();
			//AssetDatabase.AddObjectToAsset(asset, path);
			//IDLibrary.Instance.Add(asset);
			//return asset;
			return null;
		}
#endif
	}



	//using Cirrus.DH.Conditions;
using System.Collections.Generic;
using UnityEditor;
using UnityEngine;

namespace Cirrus.Unity.Objects
{
	public class IDLibrary : EditorSingletonAssetBase<IDLibrary>
	{
		[SerializeField]
		private List<IDAsset> _guids;

		public void Add(IDAsset guid)
		{
			guid.ID = _guids.Count;
			_guids.Add(guid);
			EditorUtility.SetDirty(guid);
			EditorUtility.SetDirty(this);
		}

		public void Sort()
		{
			List<IDAsset> newGuids = new List<IDAsset>();
			for (int i = 0; i < _guids.Count; i++)
			{
				IDAsset asset = _guids[i];
				if (asset == null) continue;
				if (asset.IsDestroyed())
				{
					Object.DestroyImmediate(asset);
					continue;
				}
				asset.ID = newGuids.Count;
				newGuids.Add(asset);
				EditorUtility.SetDirty(asset);

			}
			EditorUtility.SetDirty(this);
		}
	}

#if UNITY_EDITOR
	[CustomEditor(typeof(IDLibrary))]
	public class GUIDLibraryEditor : UnityEditor.Editor
	{
		public override void OnInspectorGUI()
		{
			IDLibrary targetPlayer = (IDLibrary)target;
			DrawDefaultInspector();
			if (GUILayout.Button("Sort GUIDs"))
			{
				targetPlayer.Sort();
			}			 
		}

	}	
#endif
}
